"use client";

import React, { createContext, useContext, useEffect, useState } from 'react';
import { User } from '@supabase/supabase-js';
import { getSupabaseClient } from './supabaseClient';

interface AuthContextType {
  user: User | null;
  loading: boolean;
  supabase: any;
  sendPhoneVerification: (phone: string) => Promise<{ error: Error | null }>;
  sendEmailVerification: (email: string) => Promise<{ error: Error | null }>;
  verifyPhoneCode: (phone: string, code: string) => Promise<{ error: Error | null; isExistingAccount?: boolean }>;
  verifyEmailCode: (email: string, code: string) => Promise<{ error: Error | null; isExistingAccount?: boolean }>;
  checkUserExists: (phone?: string, email?: string) => Promise<{ exists: boolean; userData?: any; error: Error | null }>;
  signOut: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const supabase = getSupabaseClient();

  useEffect(() => {
    if (!supabase) {
      console.error('❌ AuthContext: Supabase client is null');
      setLoading(false);
      return;
    }

    console.log('🔄 AuthContext: Initializing simple auth system');

    // Get initial session
    const getInitialSession = async () => {
      try {
        const { data: { session } } = await supabase.auth.getSession();
        console.log('✅ AuthContext: Initial session loaded:', !!session?.user);
        
        if (session?.user) {
          setUser(session.user);
        }
      } catch (error) {
        console.error('❌ AuthContext: Error loading initial session:', error);
      } finally {
        setLoading(false);
      }
    };

    getInitialSession();

    // Listen for auth changes
    const { data: { subscription } } = supabase.auth.onAuthStateChange(async (event, session) => {
      console.log('🔄 AuthContext: Auth state change:', event, !!session?.user);
      
      if (session?.user) {
        setUser(session.user);
      } else {
        setUser(null);
      }
      
      setLoading(false);
    });

    return () => {
      subscription.unsubscribe();
    };
  }, [supabase]);

  const sendPhoneVerification = async (phone: string) => {
    if (!supabase) return { error: new Error('Supabase client not initialized') };

    try {
      console.log('📱 Sending phone verification to:', phone);
      
      const { error } = await supabase.auth.signInWithOtp({
        phone: phone,
        options: {
          shouldCreateUser: false // FIXED: Don't create new auth users for existing accounts
        }
      });

      if (error) throw error;
      
      console.log('✅ Phone verification sent successfully');
      return { error: null };
    } catch (error) {
      console.error('❌ Phone verification error:', error);
      return { error: error as Error };
    }
  };

  const sendEmailVerification = async (email: string) => {
    if (!supabase) return { error: new Error('Supabase client not initialized') };

    try {
      console.log('📧 Sending email verification to:', email);
      
      const { data, error } = await supabase.auth.signInWithOtp({
        email: email,
        options: { 
          emailRedirectTo: undefined, // prevents magic link
          shouldCreateUser: false, // FIXED: Don't create new auth users for existing accounts
          data: {
            // Force OTP method
            method: 'otp'
          }
        }
      });

      if (error) throw error;
      
      console.log('✅ Email verification sent successfully');
      return { error: null };
    } catch (error) {
      console.error('❌ Email verification error:', error);
      return { error: error as Error };
    }
  };

  const verifyPhoneCode = async (phone: string, code: string) => {
    if (!supabase) return { error: new Error('Supabase client not initialized') };
    
    try {
      console.log('🔐 Verifying phone code for:', phone);
      
      const { data, error } = await supabase.auth.verifyOtp({
        phone: phone,
        token: code,
        type: 'sms',
      });
      
      if (error) {
        console.error('❌ Phone verification error:', error);
        return { error };
      }
      
      if (!data.user) {
        console.error('❌ No user returned after verification');
        return { error: new Error('Verification failed - no user') };
      }
      
      console.log('✅ Phone verification successful, user ID:', data.user.id);
      
      // Check if this is an existing account
      const { exists, userData } = await checkUserExists(phone, undefined);
      console.log('🔍 Account check result:', { exists, hasData: !!userData });
      
      return { error: null, isExistingAccount: exists };
    } catch (error) {
      console.error('❌ verifyPhoneCode: Unexpected error:', error);
      return { error: new Error('Invalid verification code') };
    }
  };

  const verifyEmailCode = async (email: string, code: string) => {
    if (!supabase) return { error: new Error('Supabase client not initialized') };
    
    try {
      console.log('🔐 Verifying email code for:', email);
      
      const { data, error } = await supabase.auth.verifyOtp({
        email,
        token: code,
        type: 'email'
      });

      if (error) {
        console.error('❌ Email verification error:', error);
        return { error };
      }

      if (!data.user) {
        console.error('❌ No user returned after verification');
        return { error: new Error('Verification failed - no user') };
      }

      console.log('✅ Email verification successful, user ID:', data.user.id);

      // Check if this is an existing account
      const { exists, userData } = await checkUserExists(undefined, email);
      console.log('🔍 Account check result:', { exists, hasData: !!userData });

      return { error: null, isExistingAccount: exists };
    } catch (error) {
      console.error('❌ verifyEmailCode: Unexpected error:', error);
      return { error: new Error('Invalid verification code') };
    }
  };

  const checkUserExists = async (phone?: string, email?: string) => {
    if (!supabase) return { exists: false, error: new Error('Supabase client not initialized') };

    try {
      let query = supabase.from('profiles').select('*');
      
      if (phone) {
        query = query.eq('phone', phone);
      } else if (email) {
        query = query.eq('email', email);
      } else {
        return { exists: false, error: new Error('No identifier provided') };
      }

      const { data, error } = await query.maybeSingle();

      if (error) {
        console.error('❌ Error checking user existence:', error);
        return { exists: false, error };
      }

      if (data) {
        console.log('✅ Found existing user profile');
        return { exists: true, userData: data, error: null };
      } else {
        console.log('ℹ️ No existing user profile found');
        return { exists: false, userData: null, error: null };
      }
    } catch (error) {
      console.error('❌ checkUserExists: Unexpected error:', error);
      return { exists: false, error: error as Error };
    }
  };

  const signOut = async () => {
    if (!supabase) return;
    
    console.log('👋 Signing out user');
    await supabase.auth.signOut();
    setUser(null);
  };

  const value: AuthContextType = {
    user,
    loading,
    supabase,
    sendPhoneVerification,
    sendEmailVerification,
    verifyPhoneCode,
    verifyEmailCode,
    checkUserExists,
    signOut
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
}

