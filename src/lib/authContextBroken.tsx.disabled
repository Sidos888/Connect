"use client";

import React, { createContext, useContext, useEffect, useState } from 'react';
import { User } from '@supabase/supabase-js';
import { getSupabaseClient } from './supabaseClient';

// Account interface (our true user profile)
interface Account {
  id: string;
  name: string;
  bio?: string;
  dob?: string;
  profile_pic?: string;
  connect_id?: string;
  created_at: string;
  updated_at: string;
}

interface AuthContextType {
  user: User | null;
  account: Account | null;
  loading: boolean;
  supabase: any;
  
  // Authentication methods (compatible with existing UI)
  sendEmailVerification: (email: string) => Promise<{ error: Error | null }>;
  sendPhoneVerification: (phone: string) => Promise<{ error: Error | null }>;
  verifyEmailCode: (email: string, code: string) => Promise<{ error: Error | null; isExistingAccount?: boolean; tempUser?: any }>;
  verifyPhoneCode: (phone: string, code: string) => Promise<{ error: Error | null; isExistingAccount?: boolean; tempUser?: any }>;
  
  // Legacy compatibility methods
  checkUserExists: (phone?: string, email?: string) => Promise<{ exists: boolean; userData?: any; error: Error | null }>;
  
  // Account management
  createAccount: (userData: { name: string; email?: string; phone?: string }) => Promise<{ error: Error | null }>;
  loadAccount: () => Promise<{ account: Account | null; error: Error | null }>;
  updateAccount: (updates: Partial<Account>) => Promise<{ error: Error | null }>;
  deleteAccount: () => Promise<{ error: Error | null }>;
  
  // Identity linking
  linkIdentity: (method: string, identifier: string) => Promise<{ error: Error | null }>;
  checkExistingAccount: (email?: string, phone?: string) => Promise<{ exists: boolean; account?: Account | null; error: Error | null }>;
  
  // Utility
  signOut: () => Promise<void>;
  uploadAvatar: (file: File) => Promise<{ url: string | null; error: Error | null }>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<User | null>(null);
  const [account, setAccount] = useState<Account | null>(null);
  const [loading, setLoading] = useState(true);
  const supabase = getSupabaseClient();

  // Initialize auth state
  useEffect(() => {
    if (!supabase) {
      setLoading(false);
      return;
    }

    console.log('üîÑ NewAuthContext: Initializing...');

    // Get initial session
    const getInitialSession = async () => {
      try {
        const { data: { session } } = await supabase.auth.getSession();
        console.log('‚úÖ NewAuthContext: Initial session loaded:', !!session?.user);
        
        if (session?.user) {
          setUser(session.user);
          await loadAccountForUser(session.user.id);
        }
      } catch (error) {
        console.error('‚ùå NewAuthContext: Error loading initial session:', error);
      } finally {
        setLoading(false);
      }
    };

    getInitialSession();

    // Listen for auth changes
    const { data: { subscription } } = supabase.auth.onAuthStateChange(async (event, session) => {
      console.log('üîÑ NewAuthContext: Auth state change:', event, !!session?.user);
      
        if (session?.user) {
          setUser(session.user);
        await loadAccountForUser(session.user.id);
        } else {
          setUser(null);
        setAccount(null);
        }
        
        setLoading(false);
    });

    return () => {
      subscription.unsubscribe();
    };
  }, [supabase]);

  // Load account for authenticated user
  const loadAccountForUser = async (authUserId: string) => {
    try {
      console.log('üîç NewAuthContext: Loading account for user:', authUserId);
      
      // First, try to find account through account_identities
      const { data: identityData, error: identityError } = await supabase
        .from('account_identities')
        .select(`
          account_id,
          accounts!inner (
            id,
            name,
            bio,
            dob,
            profile_pic,
            connect_id,
            created_at,
            updated_at
          )
        `)
        .eq('auth_user_id', authUserId)
        .single();

      if (identityData?.accounts) {
        console.log('‚úÖ NewAuthContext: Account found via identity linking');
        setAccount(identityData.accounts);
        return;
      }

      // If not found, check if we need to migrate from old profiles table
      console.log('üîÑ NewAuthContext: Checking for legacy profile...');
      const { data: profileData, error: profileError } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', authUserId)
        .single();

      if (profileData) {
        console.log('üì¶ NewAuthContext: Found legacy profile, migrating...');
        await migrateLegacyProfile(profileData, authUserId);
      } else {
        console.log('‚ÑπÔ∏è NewAuthContext: No account found for user');
        setAccount(null);
      }
    } catch (error) {
      console.error('‚ùå NewAuthContext: Error loading account:', error);
      setAccount(null);
    }
  };

  // Migrate legacy profile to new system
  const migrateLegacyProfile = async (profileData: any, authUserId: string) => {
    try {
      console.log('üîÑ NewAuthContext: Migrating legacy profile...');
      
      // Create new account
      const { data: newAccount, error: accountError } = await supabase
        .from('accounts')
        .insert({
          name: profileData.name || 'User',
          bio: profileData.bio,
          dob: profileData.dob,
          profile_pic: profileData.profile_pic,
          connect_id: profileData.connect_id
        })
        .select()
        .single();

      if (accountError) throw accountError;

      // Link auth user to account
      const { error: identityError } = await supabase
        .from('account_identities')
        .insert({
          account_id: newAccount.id,
          auth_user_id: authUserId,
          method: 'migrated',
          identifier: authUserId
        });

      if (identityError) throw identityError;

      // Get user details for additional identities
      const { data: userData } = await supabase.auth.getUser();
      if (userData.user?.email) {
        await supabase
          .from('account_identities')
          .insert({
            account_id: newAccount.id,
            auth_user_id: authUserId,
            method: 'email',
            identifier: userData.user.email
          });
      }

      if (userData.user?.phone) {
        await supabase
          .from('account_identities')
          .insert({
            account_id: newAccount.id,
            auth_user_id: authUserId,
            method: 'phone',
            identifier: userData.user.phone
          });
      }

      console.log('‚úÖ NewAuthContext: Legacy profile migrated successfully');
      setAccount(newAccount);
      
    } catch (error) {
      console.error('‚ùå NewAuthContext: Error migrating legacy profile:', error);
    }
  };

  // Send email verification
  const sendEmailVerification = async (email: string) => {
    if (!supabase) return { error: new Error('Supabase client not initialized') };

    try {
      console.log('üìß NewAuthContext: Sending email verification to:', email);
      
      const { error } = await supabase.auth.signInWithOtp({
        email: email,
        options: { 
          emailRedirectTo: undefined,
          shouldCreateUser: true // Always allow user creation for OTP
        }
      });

      if (error) throw error;
      
      console.log('‚úÖ NewAuthContext: Email verification sent successfully');
      return { error: null };
    } catch (error) {
      console.error('‚ùå NewAuthContext: Error sending email verification:', error);
      return { error: error as Error };
    }
  };

  // Send phone verification
  const sendPhoneVerification = async (phone: string) => {
    if (!supabase) return { error: new Error('Supabase client not initialized') };

    try {
      console.log('üì± NewAuthContext: Sending phone verification to:', phone);
      
      const { error } = await supabase.auth.signInWithOtp({
        phone: phone,
        options: { 
          shouldCreateUser: true // Always allow user creation for OTP
        }
      });

      if (error) throw error;
      
      console.log('‚úÖ NewAuthContext: Phone verification sent successfully');
      return { error: null };
    } catch (error) {
      console.error('‚ùå NewAuthContext: Error sending phone verification:', error);
      return { error: error as Error };
    }
  };

  // Verify email code
  const verifyEmailCode = async (email: string, code: string) => {
    if (!supabase) return { error: new Error('Supabase client not initialized') };

    try {
      console.log('üîê NewAuthContext: Verifying email code for:', email);
      
      const { data, error } = await supabase.auth.verifyOtp({
        email,
        token: code,
        type: 'email'
      });

      if (error) throw error;
      if (!data.user) throw new Error('No user returned from verification');

      console.log('‚úÖ NewAuthContext: Email verification successful, user ID:', data.user.id);

      // Check if this email is already linked to an account
      const { exists, account: existingAccount } = await checkExistingAccount(email);
      
      if (exists && existingAccount) {
        console.log('üë§ NewAuthContext: Found existing account, linking auth user');
        
        // Link this auth user to the existing account
        await supabase
          .from('account_identities')
          .insert({
            account_id: existingAccount.id,
            auth_user_id: data.user.id,
            method: 'email',
            identifier: email
          });

        return { error: null, isExistingAccount: true };
      } else {
        console.log('üÜï NewAuthContext: New user, will need to create account');
        return { 
          error: null, 
          isExistingAccount: false,
          tempUser: { email, authUserId: data.user.id }
        };
      }
    } catch (error) {
      console.error('‚ùå NewAuthContext: Error verifying email code:', error);
      return { error: error as Error };
    }
  };

  // Verify phone code
  const verifyPhoneCode = async (phone: string, code: string) => {
    if (!supabase) return { error: new Error('Supabase client not initialized') };

    try {
      console.log('üîê NewAuthContext: Verifying phone code for:', phone);
      
      const { data, error } = await supabase.auth.verifyOtp({
        phone,
        token: code,
        type: 'sms'
      });

      if (error) throw error;
      if (!data.user) throw new Error('No user returned from verification');

      console.log('‚úÖ NewAuthContext: Phone verification successful, user ID:', data.user.id);

      // Check if this phone is already linked to an account
      const { exists, account: existingAccount } = await checkExistingAccount(undefined, phone);
      
      if (exists && existingAccount) {
        console.log('üë§ NewAuthContext: Found existing account, linking auth user');
        
        // Link this auth user to the existing account
        await supabase
          .from('account_identities')
          .insert({
            account_id: existingAccount.id,
            auth_user_id: data.user.id,
            method: 'phone',
            identifier: phone
          });

        return { error: null, isExistingAccount: true };
      } else {
        console.log('üÜï NewAuthContext: New user, will need to create account');
        return { 
          error: null, 
          isExistingAccount: false,
          tempUser: { phone, authUserId: data.user.id }
        };
      }
    } catch (error) {
      console.error('‚ùå NewAuthContext: Error verifying phone code:', error);
      return { error: error as Error };
    }
  };

  // Check if account exists by email or phone
  const checkExistingAccount = async (email?: string, phone?: string) => {
    if (!supabase) return { exists: false, error: new Error('Supabase client not initialized') };

    try {
      let query = supabase
        .from('account_identities')
        .select(`
          account_id,
          accounts!inner (
            id,
            name,
            bio,
            dob,
            profile_pic,
            connect_id,
            created_at,
            updated_at
          )
        `);

      if (email) {
        query = query.eq('method', 'email').eq('identifier', email);
      } else if (phone) {
        query = query.eq('method', 'phone').eq('identifier', phone);
      } else {
        return { exists: false, error: new Error('No identifier provided') };
      }

      const { data, error } = await query.maybeSingle();

      if (error) {
        throw error;
      }

      if (data?.accounts) {
        return { exists: true, account: data.accounts as Account, error: null };
      } else {
        return { exists: false, account: null, error: null };
      }
    } catch (error) {
      console.error('‚ùå NewAuthContext: Error checking existing account:', error);
      return { exists: false, error: error as Error };
    }
  };

  // Legacy compatibility method for existing UI components
  const checkUserExists = async (phone?: string, email?: string) => {
    const { exists, account, error } = await checkExistingAccount(email, phone);
    return { 
      exists, 
      userData: account ? {
        id: account.id,
        name: account.name,
        bio: account.bio,
        profile_pic: account.profile_pic,
        connect_id: account.connect_id,
        created_at: account.created_at,
        updated_at: account.updated_at
      } : null,
      error 
    };
  };

  // Create new account
  const createAccount = async (userData: { name: string; email?: string; phone?: string }) => {
    if (!supabase || !user) return { error: new Error('Not authenticated') };

    try {
      console.log('üìù NewAuthContext: Creating new account for:', userData.name);
      
      // Create account
      const { data: newAccount, error: accountError } = await supabase
        .from('accounts')
        .insert({
          name: userData.name,
          connect_id: generateConnectId(userData.name)
        })
        .select()
        .single();

      if (accountError) throw accountError;

      // Link primary auth user
      const { error: primaryIdentityError } = await supabase
        .from('account_identities')
        .insert({
          account_id: newAccount.id,
          auth_user_id: user.id,
          method: userData.email ? 'email' : 'phone',
          identifier: userData.email || userData.phone || user.id
        });

      if (primaryIdentityError) throw primaryIdentityError;

      // Link additional identities if provided
      if (userData.email && userData.phone) {
        const otherMethod = userData.email ? 'phone' : 'email';
        const otherIdentifier = userData.phone;
        
        if (otherIdentifier) {
          await linkIdentity(otherMethod, otherIdentifier);
        }
      }

      console.log('‚úÖ NewAuthContext: Account created successfully');
      setAccount(newAccount);
      return { error: null };
    } catch (error) {
      console.error('‚ùå NewAuthContext: Error creating account:', error);
      return { error: error as Error };
    }
  };

  // Load current account
  const loadAccount = async () => {
    if (!user) return { account: null, error: new Error('Not authenticated') };
    
    await loadAccountForUser(user.id);
    return { account, error: null };
  };

  // Update account
  const updateAccount = async (updates: Partial<Account>) => {
    if (!supabase || !account) return { error: new Error('No account to update') };

    try {
      const { data, error } = await supabase
        .from('accounts')
        .update(updates)
        .eq('id', account.id)
        .select()
        .single();

      if (error) throw error;
      
      setAccount(data);
      return { error: null };
    } catch (error) {
      console.error('‚ùå NewAuthContext: Error updating account:', error);
      return { error: error as Error };
    }
  };

  // Delete account
  const deleteAccount = async () => {
    if (!supabase || !account) return { error: new Error('No account to delete') };

    try {
      const { error } = await supabase
        .from('accounts')
        .delete()
        .eq('id', account.id);

      if (error) throw error;
      
      await signOut();
      return { error: null };
    } catch (error) {
      console.error('‚ùå NewAuthContext: Error deleting account:', error);
      return { error: error as Error };
    }
  };

  // Link identity to current account
  const linkIdentity = async (method: string, identifier: string) => {
    if (!supabase || !user || !account) return { error: new Error('Not authenticated or no account') };

    try {
      const { error } = await supabase
        .from('account_identities')
        .insert({
          account_id: account.id,
          auth_user_id: user.id,
          method,
          identifier
        });

      if (error) throw error;
      return { error: null };
    } catch (error) {
      console.error('‚ùå NewAuthContext: Error linking identity:', error);
      return { error: error as Error };
    }
  };

  // Sign out
  const signOut = async () => {
    if (!supabase) return;
    
        await supabase.auth.signOut();
    setUser(null);
    setAccount(null);
  };

  // Upload avatar
  const uploadAvatar = async (file: File) => {
    if (!supabase || !account) return { url: null, error: new Error('Not authenticated') };

    try {
      const fileExt = file.name.split('.').pop();
      const fileName = `${account.id}.${fileExt}`;
      const filePath = `avatars/${fileName}`;

      const { error: uploadError } = await supabase.storage
        .from('avatars')
        .upload(filePath, file, { upsert: true });

      if (uploadError) throw uploadError;

      const { data } = supabase.storage
        .from('avatars')
        .getPublicUrl(filePath);

      return { url: data.publicUrl, error: null };
    } catch (error) {
      console.error('‚ùå NewAuthContext: Error uploading avatar:', error);
      return { url: null, error: error as Error };
    }
  };

  // Generate unique connect ID
  const generateConnectId = (name: string) => {
    const cleanName = name.toLowerCase().replace(/[^a-z0-9]/g, '');
    const randomSuffix = Math.random().toString(36).substring(2, 8);
    return `${cleanName}_${randomSuffix}`;
  };

  const value: AuthContextType = {
    user,
    account,
    loading,
    supabase,
    sendEmailVerification,
    sendPhoneVerification,
    verifyEmailCode,
    verifyPhoneCode,
    checkUserExists,
    createAccount,
    loadAccount,
    updateAccount,
    deleteAccount,
    linkIdentity,
    checkExistingAccount,
    signOut,
    uploadAvatar
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
}
